# Image Generation

## Welcome

```python
from pylunar import Client, endpoints
from aiohttp import ClientSession
import asyncio

token = ""  # Replace with your Lunar API Key.

async def main():
    async with ClientSession() as session:
        client = Client(session=session, token=token)

        image = await client.request(endpoints.generate_welcome, avatar="https://docs.lunardev.group/images/logo.png", username="WinterFe#2000", members="300")
        await image.save("image.jpg")

asyncio.run(main())

### Discord.py Usage:
import lunarapi
import discord

@commands.command()
async def welcome(self, ctx, *, user: Member, member_count: str):
    async with aiohttp.ClientSession() as session:
        client = pylunar.Client(
            session=session,
            token=token,
        )
        image = await client.request(
            pylunar.endpoints.generate_welcome,
            avatar=user.avatar.url,
            username=user.name,
            members=member_count
        )

        await ctx.send(file=await image.file(discord))
```

> The above returns a Bytes-like object:

```
[Image]
```

This endpoint generates a welcome image
*Discord.py users: In reference to the example on the Python tab, `image.file(discord)` is built into our wrapper.*

### HTTP Request

`GET https://api.lunardev.group/gen/welcome?avatar=url&username=text&members=str`

### Query Parameters

Parameter | Default | Description | Required
--------- | ------- | ----------- | -----------
avatar | null | Set the profile image in the image. | True
username | null | Set the username for the user in the image | True
membres | null | Set the member count for the image | True

### Result:
<%= image_tag "images/gen_welcome.png" %>

<aside class="success">
Remember â€” This is returning a bytes-like object!
</aside>

## Achievement

```python
from pylunar import Client, endpoints
from aiohttp import ClientSession
import asyncio

token = ""  # Replace with your Lunar API Key.

async def main():
    async with ClientSession() as session:
        client = Client(session=session, token=token)

        image = await client.request(endpoints.generate_achievement, text="Woohoo! I made a request!")
        await image.save("image.jpg")

asyncio.run(main())

### Discord.py Usage:
import lunarapi
import discord

@commands.command()
    async def achievement(self, ctx, *, text: str):
        async with aiohttp.ClientSession() as session:
            client = pylunar.Client(
                session=session,
                token=token,
            )
            image = await client.request(
                pylunar.endpoints.generate_achievement, text=text
            )

            await ctx.send(file=await image.file(discord))
```

> The above returns a Bytes-like object:

```
[Image]
```

This endpoint generates a Minecraft achievement :D

### HTTP Request

`GET https://api.lunardev.group/gen/achievement?text=text[&icon=int]`

### Query Parameters

Parameter | Default | Description | Required
--------- | ------- | ----------- | -----------
text | null | Set the text for the achievement. | True
icon | random | Set the icon for the achievement. This is an int 1-45 | False

### Result:
<%= image_tag "images/gen_achievement.png" %>

## Amiajoke

```python
from pylunar import Client, endpoints
from aiohttp import ClientSession
import asyncio

token = ""  # Replace with your Lunar API Key.

async def main():
    async with ClientSession() as session:
        client = Client(session=session, token=token)

        image = await client.request(endpoints.generate_amiajoke, image="https://docs.lunardev.group/images/logo.png")
        await image.save("image.jpg")

asyncio.run(main())

### Discord.py Usage:
import lunarapi
import discord

@commands.command()
async def amiajoke(self, ctx, *, user: discord.User):
    async with aiohttp.ClientSession() as session:
        client = pylunar.Client(
            session=session,
            token=token,
        )
        image = await client.request(
            pylunar.endpoints.generate_amiajoke, image=user.avatar.url
        )

        await ctx.send(file=await image.file(discord))
```

> The above returns a Bytes-like object:

```
[Image]
```

This endpoint generates a meme

### HTTP Request

`GET https://api.lunardev.group/gen/amiajoke?image=url`

### Query Parameters

Parameter | Default | Description | Required
--------- | ------- | ----------- | -----------
image | null | Set the image top place on the meme. | True

### Result:
<%= image_tag "images/gen_amiajoke.png" %>

## Bad

```python
from pylunar import Client, endpoints
from aiohttp import ClientSession
import asyncio

token = ""  # Replace with your Lunar API Key.

async def main():
    async with ClientSession() as session:
        client = Client(session=session, token=token)

        image = await client.request(endpoints.generate_bad, image="https://docs.lunardev.group/images/logo.png")
        await image.save("image.jpg")

asyncio.run(main())

### Discord.py Usage:
import lunarapi
import discord

@commands.command()
async def amiajoke(self, ctx, *, user: discord.User):
    async with aiohttp.ClientSession() as session:
        client = pylunar.Client(
            session=session,
            token=token,
        )
        image = await client.request(
            pylunar.endpoints.generate_bad, image=user.avatar.url
        )

        await ctx.send(file=await image.file(discord))
```

> The above returns a Bytes-like object:

```
[Image]
```

This endpoint generates a meme

### HTTP Request

`GET https://api.lunardev.group/gen/bad?image=url`

### Query Parameters

Parameter | Default | Description | Required
--------- | ------- | ----------- | -----------
image | null | Set the image top place on the meme. | True

### Result:
<%= image_tag "images/gen_bad.png" %>

## Calling

```python
from pylunar import Client, endpoints
from aiohttp import ClientSession
import asyncio

token = ""  # Replace with your Lunar API Key.

async def main():
    async with ClientSession() as session:
        client = Client(session=session, token=token)

        image = await client.request(endpoints.generate_calling,text="Ring ring haha")
        await image.save("image.jpg")

asyncio.run(main())

### Discord.py Usage:
import lunarapi
import discord

@commands.command()
async def amiajoke(self, ctx, *, text: str):
    async with aiohttp.ClientSession() as session:
        client = pylunar.Client(
            session=session,
            token=token,
        )
        image = await client.request(
            pylunar.endpoints.generate_calling, text=text
        )

        await ctx.send(file=await image.file(discord))
```

> The above returns a Bytes-like object:

```
[Image]
```

This endpoint generates a meme. Tbh we don't understand this meme, we just wanted more memes.

### HTTP Request

`GET https://api.lunardev.group/gen/calling?text=text`

### Query Parameters

Parameter | Default | Description | Required
--------- | ------- | ----------- | -----------
text | null | Set the text for the meme. | True

### Result:
<%= image_tag "images/gen_calling.png" %>